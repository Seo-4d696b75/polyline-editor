[{"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\reportWebVitals.ts":"1","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\index.tsx":"2","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\Actions.ts":"3","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Dialog.tsx":"4","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\color.ts":"5","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\utils.ts":"6","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Map.tsx":"7","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Editor.tsx":"8","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\PolylineExtension.ts":"9","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\PolylineEdit.ts":"10","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\Reducer.ts":"11"},{"size":425,"mtime":1609596005201,"results":"12","hashOfConfig":"13"},{"size":491,"mtime":1612596478078,"results":"14","hashOfConfig":"13"},{"size":2282,"mtime":1614522327211,"results":"15","hashOfConfig":"13"},{"size":9756,"mtime":1614520565449,"results":"16","hashOfConfig":"13"},{"size":894,"mtime":1609940945646,"results":"17","hashOfConfig":"13"},{"size":2719,"mtime":1612598892633,"results":"18","hashOfConfig":"13"},{"size":11948,"mtime":1614523223763,"results":"19","hashOfConfig":"13"},{"size":7610,"mtime":1614519988046,"results":"20","hashOfConfig":"13"},{"size":4381,"mtime":1614517972747,"results":"21","hashOfConfig":"13"},{"size":6125,"mtime":1614518099922,"results":"22","hashOfConfig":"13"},{"size":2668,"mtime":1614519091646,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"141b9ne",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\reportWebVitals.ts",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\index.tsx",[],["49","50"],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\Actions.ts",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Dialog.tsx",["51"],"import React, { FormEvent } from 'react';\r\nimport './Dialog.css';\r\nimport { Modal, Button, Form, Col, DropdownButton, Dropdown, FormControl, FormLabel, Row, FormGroup } from 'react-bootstrap';\r\nimport * as Action from '../script/Actions'\r\nimport { Polyline } from \"../script/types\"\r\nimport { GlobalState, ImportModalProps, ExportModalProps, ModalType } from '../script/Reducer'\r\nimport { connect } from \"react-redux\"\r\n\r\ntype FormControlElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\nfunction mapState2Props(state: GlobalState): DialogProps{\r\n  return {\r\n    dialog: state.modal\r\n  }\r\n}\r\n\r\ninterface DialogProps {\r\n  dialog: ImportModalProps | ExportModalProps | null\r\n}\r\n\r\ninterface DialogState {\r\n  format: string\r\n  text: string\r\n  invalid_format: boolean\r\n  invalid_text: boolean\r\n  digit: number\r\n  points: Polyline | null\r\n}\r\n\r\n\r\nclass Dialog extends React.Component<DialogProps, DialogState> {\r\n\r\n  state: DialogState = {\r\n    format: \"$<lat>,$<lng>\",\r\n    text: \"\",\r\n    invalid_format: false,\r\n    invalid_text: false,\r\n    digit: 5,\r\n    points: null,\r\n  }\r\n\r\n  focus_ref: HTMLTextAreaElement | null = null\r\n\r\n  renderDialog() {\r\n    const setText = (event: React.ChangeEvent<FormControlElement>) => {\r\n      this.setState({\r\n        ...this.state,\r\n        text: event.target.value\r\n      })\r\n    }\r\n    const setFormat = (event: React.ChangeEvent<FormControlElement>) => {\r\n      this.setState({\r\n        ...this.state,\r\n        format: event.target.value\r\n      })\r\n    }\r\n    const selectFormat = (eventKey: string | null, e: React.SyntheticEvent<unknown>) => {\r\n      this.setState({\r\n        ...this.state,\r\n        format: eventKey ? eventKey : \"\"\r\n      })\r\n    }\r\n    const setDigit = (event: React.ChangeEvent<FormControlElement>) => {\r\n      this.setState({\r\n        ...this.state,\r\n        digit: parseInt(event.target.value),\r\n      })\r\n    }\r\n    const copy = (event: any) => {\r\n      if (navigator.clipboard) {\r\n        navigator.clipboard.writeText(this.state.text)\r\n      }\r\n    }\r\n    if (!this.props.dialog ) return null\r\n    switch (this.props.dialog.type) {\r\n      case ModalType.Import: {\r\n        return (\r\n          <Form>\r\n            <FormLabel>座標のフォーマット</FormLabel>\r\n            <Row>\r\n              <Col xs={8}>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  rows={1}\r\n                  value={this.state.format}\r\n                  onChange={setFormat} />\r\n              </Col>\r\n              <Col xs={2}>\r\n                <DropdownButton\r\n                  id=\"import-format-template\"\r\n                  variant=\"outline-primary\"\r\n                  title=\"テンプレート\"\r\n                  onSelect={selectFormat}>\r\n                  <Dropdown.Item eventKey=\"$<lat>,$<lng>\">CSV (lat,lng)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey=\"$<lng>,$<lat>\">CSV (lng,lat)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey={'\"lat\":$<lat>,.?\"lng\":$<lng>'}>JSON (lat/lng)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey={'\"lng\":$<lng>,.?\"lat\":$<lat>'}>JSON (lng/lat)</Dropdown.Item>\r\n                </DropdownButton>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"invalid\">{this.state.invalid_format ? \"緯度$<lat>・経度$<lng>を表すフォーマットを指定してください\" : null}</div>\r\n            <FormGroup controlId=\"data\">\r\n              <FormLabel>座標データ</FormLabel>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                rows={12}\r\n                size=\"sm\"\r\n                onChange={setText}\r\n                ref={(c: HTMLTextAreaElement | null) => {\r\n                  if (c) {\r\n                    setTimeout(() => {\r\n                      c.focus()\r\n                    }, 100);\r\n                  }\r\n                }} />\r\n              {this.state.invalid_text ? <div className=\"invalid\">有効なデータが見つかりません</div> : null}\r\n            </FormGroup>\r\n\r\n          </Form>\r\n        )\r\n      }\r\n      case ModalType.Export: {\r\n        return (\r\n          <Form>\r\n            <FormLabel>座標のフォーマット</FormLabel>\r\n            <Row>\r\n              <Col xs={8}>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  rows={1}\r\n                  value={this.state.format}\r\n                  onChange={setFormat} />\r\n              </Col>\r\n              <Col xs={2}>\r\n                <DropdownButton\r\n                  id=\"export-format-template\"\r\n                  title=\"テンプレート\"\r\n                  variant=\"outline-primary\"\r\n                  onSelect={selectFormat}>\r\n                  <Dropdown.Item eventKey=\"$<lat>,$<lng>\">CSV (lat,lng)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey=\"$<lng>,$<lat>\">CSV (lng,lat)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey={'{\"lat\":$<lat>,\"lng\":$<lng>},'}>JSON (lat/lng)</Dropdown.Item>\r\n                  <Dropdown.Item eventKey={'{\"lng\":$<lng>,\"lat\":$<lat>},'}>JSON (lng/lat)</Dropdown.Item>\r\n                </DropdownButton>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"invalid\">{this.state.invalid_format ? \"緯度$<lat>・経度$<lng>を表すフォーマットを指定してください\" : null}</div>\r\n            <Row>\r\n              <Col xs={6}>\r\n                <FormLabel>座標値の小数点以下桁数 : <strong>{this.state.digit}</strong></FormLabel>\r\n                <FormControl\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  defaultValue={this.state.digit}\r\n                  onChange={setDigit} />\r\n              </Col>\r\n              <Col xs={2}>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={this.submit.bind(this)}>\r\n                  Export\r\n                  </Button>\r\n              </Col>\r\n              <Col xs={2}>\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  onClick={copy}>\r\n                  Copy\r\n                  </Button>\r\n              </Col>\r\n            </Row>\r\n            <FormGroup controlId=\"data\">\r\n              <FormControl\r\n                as=\"textarea\"\r\n                rows={12}\r\n                size=\"sm\"\r\n                readOnly\r\n                value={this.state.text} />\r\n            </FormGroup>\r\n\r\n          </Form>\r\n        )\r\n      }\r\n      default: {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  closeModal() {\r\n    Action.closeDialog()\r\n  }\r\n\r\n  submit() {\r\n    const format = this.state.format\r\n    var match = format.match(/\\$<(.+?)>/g)\r\n    if (match && match.length === 2) {\r\n      var checked = false\r\n      if (match[0] === \"$<lat>\" && match[1] === \"$<lng>\") {\r\n        checked = true\r\n      } else if (match[0] === \"$<lng>\" && match[1] === \"$<lat>\") {\r\n        checked = true\r\n      }\r\n      if (checked) {\r\n        switch (this.props?.dialog?.type ) {\r\n          case ModalType.Import: {\r\n            this.importPolyline(format, this.state.text)\r\n            break\r\n          }\r\n          case ModalType.Export: {\r\n            this.exportPolyline(format, this.state.points)\r\n            break\r\n          }\r\n          default:\r\n        }\r\n        return\r\n      }\r\n    }\r\n    this.setState({\r\n      ...this.state,\r\n      invalid_format: true,\r\n    })\r\n  }\r\n\r\n  importPolyline(format: string, text: string) {\r\n    format = format.replace(/\\$<lat>/, '(?<lat>[0-9\\\\.]+)')\r\n    format = format.replace(/\\$<lng>/, '(?<lng>[0-9\\\\.]+)')\r\n    var lines: Array<Polyline> = []\r\n    var points: Polyline = []\r\n    text.split(/\\n/).forEach(line => {\r\n      var regex = new RegExp(format, 'g')\r\n      var cnt = 0\r\n      while (true) {\r\n        var match = regex.exec(line)\r\n        if (!match) break\r\n        if (match.groups) {\r\n          var lat = parseFloat(match.groups.lat)\r\n          var lng = parseFloat(match.groups.lng)\r\n          if (lat > -90 && lat < 90 && lng >= -180 && lng <= 180) {\r\n            points.push({ lat: lat, lng: lng })\r\n            cnt += 1\r\n          }\r\n        }\r\n      }\r\n      if (cnt === 0 && points.length > 0) {\r\n        lines.push(points)\r\n        points = []\r\n      }\r\n    })\r\n    if (points.length > 0) {\r\n      lines.push(points)\r\n    }\r\n    if (lines.length > 0) {\r\n      Action.importPolyline(lines)\r\n      this.closeModal()\r\n    } else {\r\n      this.setState({\r\n        ...this.state,\r\n        invalid_text: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  exportPolyline(format: string, points: Polyline | null) {\r\n    const digit = this.state.digit\r\n    if (points) {\r\n      var text = points.map(p => {\r\n        var line = format\r\n        line = line.replace(\"$<lat>\", p.lat.toFixed(digit))\r\n        line = line.replace(\"$<lng>\", p.lng.toFixed(digit))\r\n        return line\r\n      }).join(\"\\n\")\r\n      this.setState({\r\n        ...this.state,\r\n        text: text,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal show={this.props.dialog !== null} onHide={this.closeModal.bind(this)} id=\"edit\">\r\n          <Modal.Body className=\"modal-body\">\r\n            {this.renderDialog()}\r\n          </Modal.Body>\r\n          <Modal.Footer className=\"modal-footer\">\r\n\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.closeModal.bind(this)}>\r\n              Close\r\n              </Button>\r\n            {this.props.dialog?.type === ModalType.Import ? (\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                onClick={this.submit.bind(this)}>\r\n                Import\r\n              </Button>\r\n            ) : null}\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapState2Props)(Dialog)","C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\color.ts",[],["52","53"],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\utils.ts",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Map.tsx",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\Editor.tsx",["54"],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\PolylineExtension.ts",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\components\\PolylineEdit.ts",[],"C:\\Users\\skaor\\Documents\\ekimemo\\ts-test\\src\\script\\Reducer.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"55","replacedBy":"63"},{"ruleId":"57","replacedBy":"64"},{"ruleId":"59","severity":1,"message":"65","line":11,"column":24,"nodeType":"61","messageId":"62","endLine":11,"endColumn":32},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'FormEvent' is defined but never used.","Identifier","unusedVar",["66"],["67"],"'Polyline' is defined but never used.","no-global-assign","no-unsafe-negation"]